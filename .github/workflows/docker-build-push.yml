name: 🚀 Build and Publish VR-StarterKonto to GHCR

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security Scanning
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Test
  build-and-test:
    name: 🔨 Build and Test
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      # Backend Tests
      - name: Install Backend Dependencies
        run: |
          cd backend
          npm ci

      - name: Test Backend API
        run: |
          cd backend
          npm test
        continue-on-error: true

      - name: Start Backend for Integration Tests
        run: |
          cd backend
          npm start &
          sleep 5
          curl -f http://localhost:3001/api/health || exit 1

      # Frontend Tests
      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm ci

      - name: Test Frontend Build
        run: |
          cd frontend
          npm run build

      - name: Test Frontend
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false
        continue-on-error: true

  # Docker Build and Push
  docker-build-push:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

  # Container Testing
  container-test:
    name: 🧪 Container Integration Test
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.event_name != 'pull_request'

    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test Container
        run: |
          # Pull und starte Container
          docker run -d --name vr-starterkonto-test -p 8080:80 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Warte auf Container startup
          sleep 30
          
          # Health Checks
          curl -f http://localhost:8080/health || exit 1
          curl -f http://localhost:8080/api/health || exit 1
          curl -f http://localhost:8080/ || exit 1
          
          # API Funktionalitäts-Test
          response=$(curl -s http://localhost:8080/api/konto)
          echo "API Response: $response"
          
          # Clean up
          docker stop vr-starterkonto-test
          docker rm vr-starterkonto-test

  # Deployment Information
  deployment-info:
    name: 📋 Deployment Information
    runs-on: ubuntu-latest
    needs: [docker-build-push, container-test]
    if: always() && (needs.docker-build-push.result == 'success')

    steps:
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Comment on PR with deployment info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `### 🚀 VR-StarterKonto Container erfolgreich gebaut!

            **Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`
            **Tags:** 
            ${{ steps.meta.outputs.tags }}

            **Verwendung:**
            \`\`\`bash
            # Container starten
            docker run -p 80:80 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}
            
            # Oder mit docker-compose
            docker-compose up -d
            \`\`\`

            **Zugriff:**
            - Frontend: http://localhost
            - Backend API: http://localhost/api/
            - Health Check: http://localhost/health

            ✅ **Status:** Container-Tests erfolgreich
            📊 **Platforms:** linux/amd64, linux/arm64
            🔒 **Security:** Trivy Scan durchgeführt`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Create deployment summary
        run: |
          echo "### 🎉 VR-StarterKonto Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Quick Start:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 80:80 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY