version: '3.8'

services:
  # Production Container (Alle Services in einem Container)
  vr-starterkonto:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "3001:3001"
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vr-starterkonto.rule=Host(`starterkonto.local`)"
      - "traefik.http.services.vr-starterkonto.loadbalancer.server.port=80"

  # Development Setup (Separate Services)
  backend-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3001
    command: npm run dev
    profiles:
      - dev

  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev  
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:3001
      - CHOKIDAR_USEPOLLING=true
    command: npm start
    depends_on:
      - backend-dev
    profiles:
      - dev

  # Optional: Database für erweiterte Features
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: vr_starterkonto
      POSTGRES_USER: vr_user
      POSTGRES_PASSWORD: vr_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    profiles:
      - database

  # Optional: Redis für Caching/Sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    profiles:
      - cache

  # Optional: Monitoring mit Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    profiles:
      - monitoring

  # Optional: Grafana für Dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge